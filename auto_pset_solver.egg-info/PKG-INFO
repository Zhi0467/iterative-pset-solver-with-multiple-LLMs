Metadata-Version: 2.4
Name: auto-pset-solver
Version: 0.1.0
Summary: A Python script to automatically solve problem sets from PDF files using LLMs.
License: MIT
Project-URL: Homepage, https://github.com/example/auto-pset
Project-URL: Bug Tracker, https://github.com/example/auto-pset/issues
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: anthropic
Requires-Dist: google-genai
Requires-Dist: openai
Requires-Dist: python-dotenv
Requires-Dist: PyMuPDF
Requires-Dist: PyMuPDF4LLM
Requires-Dist: tenacity
Requires-Dist: httpx
Requires-Dist: requests
Requires-Dist: pdfplumber
Requires-Dist: Pillow
Requires-Dist: mcp>=1.0.0
Requires-Dist: sympy>=1.12
Requires-Dist: numpy>=1.24.0
Requires-Dist: fastmcp>=1.0.0
Requires-Dist: matplotlib
Requires-Dist: pytest
Dynamic: license-file

# Auto Pset Solver

A command-line tool (`main.py`) to automatically solve problem sets (PDF files) using two iterative duos of LLMs:

1. **Duo 1**: Solver = Anthropic, Verifier = Deepseek  
2. **Duo 2**: Solver = Deepseek, Verifier = Anthropic

By default, Duo 1 runs for **2 rounds**, and if any problems remain unsolved, Duo 2 runs for **2 rounds** as fallback.

---

## 🚀 Features

- **Automatic duo logic**: Duo 1 attempts all problems; Duo 2 only runs on failures.
- **PDF modes**:
  - `direct_upload` (default): upload the full PDF to providers supporting file ingestion.
  - `text_extract`: extract text via `AdvancedPDFExtractor` and send as text prompts.
- **Web-search modes**:
  - `default`: web search enabled for verification (Anthropic + Gemini), disabled for solving.
  - `all_enabled`, `all_disabled`, `solver_only`, `verifier_only`.
- **Retry & backoff**: handles transient API errors.
- **Configurable providers**: set API keys and endpoints in `LLMConfig`.

---

## 🎛️ Installation

```bash
pip install auto-pset
````

Or clone and install editable:

```bash
git clone https://github.com/Zhi0467/iterative-pset-solver-with-multiple-LLMs.git
cd iterative-pset-solver-with-multiple-LLMs
pip install -e .
```

---

## 📖 Usage

```bash
python main.py <path_to_pdf> [pdf_mode] [web_search_mode]
```

* `<path_to_pdf>`: path to your PDF problem set.
* `[pdf_mode]`: `direct_upload` (default) or `text_extract`.
* `[web_search_mode]`: `default` (balanced), `all_enabled`, `all_disabled`, `solver_only`, or `verifier_only`.

### Examples

1. **Quick run with defaults** (Duo 1 → Duo 2 if needed):

   ```bash
   python main.py hw.pdf
   ```

2. **Text-extraction mode**:

   ```bash
   python main.py hw.pdf text_extract
   ```

3. **Force all providers to search**:

   ```bash
   python main.py hw.pdf direct_upload all_enabled
   ```

4. **Disable web search completely**:

   ```bash
   python main.py hw.pdf direct_upload all_disabled
   ```

5. **Solver-only web search**:

   ```bash
   python main.py hw.pdf text_extract solver_only
   ```

> ⚠️ If after Duo 2 some problems remain unsolved, simply rerun the same command to process the leftovers.

---

## ⚙️ Configuration

Edit `~/utils/config.py` to customize your model selection, max tokens, and temperature.

Copy `~/.env.example` to `~/.env` to store your API keys. 

---

## 🛠️ Customization

* **Change duo providers**: modify `solver1`, `verifier1`, `solver2`, `verifier2` in `main.py`.
* **Adjust rounds**: change the `rounds=2` parameter when constructing `ProblemSetSolver` instances.
* **Add new PDF modes**: update `PDFMode` enum and parsing logic in `main.py`.

---

## ⚖️ Disclaimer

For **personal educational use**. Respect academic integrity and copyright.


